
'use client';

import { useState } from "react";
import useSWR from 'swr';
import { XMarkIcon, PlayIcon, PhotoIcon, TrashIcon, StarIcon } from '@heroicons/react/24/outline';

interface JobItem {
  id: string;
  userId: string;
  status: 'processing' | 'completed' | 'failed';
  type: 'video' | 'multitalk' | 'flux-kontext' | 'wan22';
  prompt?: string;
  options?: string;
  resultUrl?: string;
  thumbnailUrl?: string;
  createdAt: string;
  completedAt?: string;
  isFavorite?: boolean; // Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉú
}

interface LibraryItemProps {
  item: JobItem;
  onItemClick: (item: JobItem) => void;
  onDeleteClick: (item: JobItem, e: React.MouseEvent) => void;
  onFavoriteToggle: (item: JobItem, e: React.MouseEvent) => void;
}

const fetcher = (url: string) => fetch(url).then(res => res.json());

const LibraryItem: React.FC<LibraryItemProps> = ({ item, onItemClick, onDeleteClick, onFavoriteToggle }) => {
  // MultiTalkÏùò Í≤ΩÏö∞ optionsÏóêÏÑú ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°ú Ï∂îÏ∂ú
  const getThumbnailUrl = () => {
    // MultiTalkÏùò Í≤ΩÏö∞ ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄÎ•º Ïç∏ÎÑ§ÏùºÎ°ú ÏÇ¨Ïö©
    if (item.type === 'multitalk' && item.options) {
      try {
        const options = JSON.parse(item.options);
        
        // Î°úÏª¨ Ïõπ Í≤ΩÎ°úÍ∞Ä ÏûàÏúºÎ©¥ Ïö∞ÏÑ† ÏÇ¨Ïö© (Í∞ÄÏû• ÏïàÏ†ïÏ†Å)
        if (options.imageWebPath) {
          console.log('üñºÔ∏è Using local web path for MultiTalk thumbnail');
          return options.imageWebPath;
        }
        
        // S3 URLÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö© (Ìè¥Î∞±)
        if (options.imageS3Url) {
          console.log('üîó Using S3 URL for MultiTalk thumbnail');
          return options.imageS3Url;
        }
      } catch (e) {
        console.warn('Failed to parse MultiTalk options:', e);
      }
    }
    
    // FLUX KONTEXTÏùò Í≤ΩÏö∞ Í≤∞Í≥º Ïù¥ÎØ∏ÏßÄÎÇò ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©
    if (item.type === 'flux-kontext' && item.options) {
      try {
        const options = JSON.parse(item.options);
        
        // Í≤∞Í≥º Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÏúºÎ©¥ Ïö∞ÏÑ† ÏÇ¨Ïö©
        if (item.resultUrl) {
          console.log('üé® Using result image for FLUX KONTEXT thumbnail');
          return item.resultUrl;
        }
        
        // ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°úÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©
        if (options.inputImagePath) {
          console.log('üñºÔ∏è Using input image path for FLUX KONTEXT thumbnail');
          return options.inputImagePath;
        }
        
        // ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ S3 URLÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©
        if (options.inputImageS3Url) {
          console.log('üñºÔ∏è Using input image S3 URL for FLUX KONTEXT thumbnail');
          return options.inputImageS3Url;
        }
      } catch (e) {
        console.warn('Failed to parse FLUX KONTEXT options:', e);
      }
    }
    
    // WAN 2.2Ïùò Í≤ΩÏö∞ ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄÎ•º Ïç∏ÎÑ§ÏùºÎ°ú ÏÇ¨Ïö©
    if (item.type === 'wan22' && item.options) {
      try {
        const options = JSON.parse(item.options);
        
        // base64 Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö© (FLUX KONTEXTÏôÄ ÎèôÏùº)
        if (options.imageBase64) {
          console.log('üñºÔ∏è Using base64 image for WAN 2.2 thumbnail');
          return `data:image/jpeg;base64,${options.imageBase64}`;
        }
        
        // ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°úÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö© (Ìè¥Î∞±)
        if (options.inputImagePath) {
          console.log('üñºÔ∏è Using input image path for WAN 2.2 thumbnail');
          return `/results/${options.inputImageName}`;
        }
      } catch (e) {
        console.warn('Failed to parse WAN 2.2 options:', e);
      }
    }
    
    // Îã§Î•∏ ÌÉÄÏûÖÏùò Í≤ΩÏö∞ Í≤∞Í≥º URL ÏÇ¨Ïö©
    if (item.status === 'completed' && item.resultUrl) {
      return item.resultUrl;
    }
    
    return item.thumbnailUrl;
  };

  const thumbnailUrl = getThumbnailUrl();
  const createdTime = new Date(item.createdAt).toLocaleTimeString();
  const completedTime = item.completedAt ? new Date(item.completedAt).toLocaleTimeString() : null;

  // Î°úÏª¨ ÌååÏùº Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const getLocalFileInfo = () => {
    if (item.type === 'multitalk' && item.options) {
      try {
        const options = JSON.parse(item.options);
        return options.localFileInfo;
      } catch (e) {
        return null;
      }
    }
    return null;
  };

  const localFileInfo = getLocalFileInfo();

  const handleClick = () => {
    if (item.status === 'completed' && item.resultUrl) {
      onItemClick(item);
    }
  };

  return (
    <div 
      className={`
        relative bg-background/50 rounded-lg border border-border overflow-hidden cursor-pointer transition-all duration-200 hover:border-primary/50 hover:bg-background/70 group
        ${item.status === 'completed' ? 'hover:shadow-lg hover:shadow-primary/20' : ''}
      `}
      onClick={handleClick}
    >
      {/* Ïç∏ÎÑ§Ïùº */}
      <div className="relative aspect-video bg-background overflow-hidden">
        {thumbnailUrl ? (
          <img 
            src={thumbnailUrl} 
            alt="Thumbnail" 
            className="w-full h-full object-cover transition-transform duration-200 group-hover:scale-105"
            onError={(e) => {
              console.error('‚ùå Thumbnail error:', e);
              e.currentTarget.style.display = 'none';
            }}
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center text-foreground/30">
            <PhotoIcon className="w-12 h-12" />
          </div>
        )}
        
        {/* ÏÉÅÌÉú ÌëúÏãú */}
        <div className="absolute top-2 left-2 px-2 py-1 bg-black/70 rounded text-xs text-white backdrop-blur-sm">
          ID: {item.id.substring(0, 6)}
        </div>

        {/* ÏÇ≠Ï†ú Î≤ÑÌäº */}
        <button
          onClick={(e) => onDeleteClick(item, e)}
          className="absolute top-2 right-2 p-1.5 bg-red-500/80 hover:bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-all duration-200 hover:scale-110 backdrop-blur-sm"
          title="ÏÇ≠Ï†ú"
        >
          <TrashIcon className="w-3.5 h-3.5" />
        </button>

        {/* Ï¶êÍ≤®Ï∞æÍ∏∞ Î≤ÑÌäº */}
        <button
          onClick={(e) => onFavoriteToggle(item, e)}
          className={`absolute bottom-2 left-2 p-1.5 rounded-full transition-all duration-200 hover:scale-110 backdrop-blur-sm ${
            item.isFavorite 
              ? 'bg-yellow-500/90 hover:bg-yellow-400 text-white opacity-100' 
              : 'bg-gray-600/80 hover:bg-gray-500 text-white opacity-0 group-hover:opacity-100'
          }`}
          title={item.isFavorite ? 'Ï¶êÍ≤®Ï∞æÍ∏∞ Ìï¥Ï†ú' : 'Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∂îÍ∞Ä'}
        >
          <StarIcon className={`w-3.5 h-3.5 ${item.isFavorite ? 'fill-current' : ''}`} />
        </button>
      </div>
      
      <div className="p-3 space-y-2">
        <p className="text-sm text-foreground/80 truncate">
          {item.type === 'multitalk' ? 'MultiTalk Content' : 
           item.type === 'wan22' ? 'WAN 2.2 Video' : 
           (item.prompt || 'No prompt')}
        </p>
        
        <div className="flex justify-between items-center">
          <span className="text-xs px-2 py-1 bg-primary/20 text-primary rounded-full capitalize">
            {item.type}
          </span>
          <span className={`text-xs font-medium ${
            item.status === 'completed' ? 'text-green-400' : 
            item.status === 'failed' ? 'text-red-400' : 'text-yellow-400'
          }`}>
            {item.status}
          </span>
        </div>
        
        <div className="text-xs text-foreground/50 space-y-1">
          <div>Created: {createdTime}</div>
          {completedTime && <div>Completed: {completedTime}</div>}
        </div>
      </div>
    </div>
  );
};

// Í≤∞Í≥º Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏
const ResultModal: React.FC<{ item: JobItem | null; onClose: () => void }> = ({ item, onClose }) => {
  if (!item) return null;

  const getOptions = () => {
    try {
      return item.options ? JSON.parse(item.options) : {};
    } catch (e) {
      return {};
    }
  };

  const options = getOptions();

  // Ïã§Ï†ú Í≤∞Í≥º URL Í∞ÄÏ†∏Ïò§Í∏∞
  const getResultUrl = () => {
    if (item.resultUrl) {
      // RunPodÏóêÏÑú ÏßÅÏ†ë Ï†úÍ≥µÌïòÎäî URLÏù∏ Í≤ΩÏö∞
      if (item.resultUrl.startsWith('http')) {
        return item.resultUrl;
      }
      
      // Î°úÏª¨ Í≤ΩÎ°úÏù∏ Í≤ΩÏö∞ (Í∞úÎ∞ú ÌôòÍ≤Ω)
      if (item.resultUrl.startsWith('/')) {
        return item.resultUrl;
      }
    }
    
    // optionsÏóêÏÑú RunPod Í≤∞Í≥º URL Ï∞æÍ∏∞
    if (options.runpodResultUrl) {
      return options.runpodResultUrl;
    }
    
    return null;
  };

  const resultUrl = getResultUrl();

  // Î°úÏª¨ ÌååÏùº Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const getLocalFileInfo = () => {
    if (item.type === 'multitalk' && item.options) {
      try {
        const options = JSON.parse(item.options);
        return options.localFileInfo;
      } catch (e) {
        return null;
      }
    }
    return null;
  };

  const localFileInfo = getLocalFileInfo();

  return (
    <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4">
      <div className="bg-secondary rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto custom-scrollbar">
        <div className="flex items-center justify-between p-6 border-b border-border">
          <h3 className="text-xl font-semibold">
            {item.type === 'multitalk' ? 'MultiTalk Result' : `${item.type} Result`}
          </h3>
          <button
            onClick={onClose}
            className="p-2 hover:bg-background rounded-lg transition-colors"
          >
            <XMarkIcon className="w-6 h-6" />
          </button>
        </div>
        
        <div className="p-6 space-y-6">
          {/* ÌîÑÎ°¨ÌîÑÌä∏ */}
          {item.prompt && (
            <div>
              <h4 className="font-medium mb-2">Prompt</h4>
              <p className="text-foreground/80 bg-background p-3 rounded-lg">{item.prompt}</p>
            </div>
          )}
          
          {/* Í≤∞Í≥ºÎ¨º */}
          {resultUrl ? (
            <div>
              <h4 className="font-medium mb-2">Result</h4>
              {item.type === 'multitalk' ? (
                <div className="space-y-4">
                  <video 
                    controls 
                    className="w-full max-h-96 rounded-lg bg-black"
                    src={resultUrl}
                    onError={(e) => console.error('Video error:', e)}
                  >
                    Your browser does not support the video tag.
                  </video>
                  <div className="text-sm text-foreground/60">
                    üí° ÎπÑÎîîÏò§Í∞Ä Ïû¨ÏÉùÎêòÏßÄ ÏïäÎäî Í≤ΩÏö∞, ÏßÅÏ†ë Îã§Ïö¥Î°úÎìúÌïòÏó¨ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.
                  </div>
                </div>
              ) : item.type === 'flux-kontext' ? (
                // FLUX KONTEXTÎäî Ïù¥ÎØ∏ÏßÄ Í≤∞Í≥ºÎßå ÌëúÏãú
                <div className="space-y-4">
                  <img 
                    src={resultUrl} 
                    alt="Generated FLUX KONTEXT image" 
                    className="w-full max-h-96 object-contain rounded-lg bg-background"
                    onError={(e) => console.error('FLUX KONTEXT image error:', e)}
                    onLoad={() => console.log('‚úÖ FLUX KONTEXT image loaded successfully:', resultUrl)}
                  />
                  <div className="text-sm text-foreground/60">
                    üé® FLUX KONTEXTÎ°ú ÏÉùÏÑ±Îêú Ïù¥ÎØ∏ÏßÄÏûÖÎãàÎã§.
                  </div>
                </div>
              ) : (
                <div className="space-y-4">
                  <video 
                    controls 
                    className="w-full max-h-96 rounded-lg bg-black"
                    src={resultUrl}
                    onError={(e) => console.error('Video error:', e)}
                  >
                    Your browser does not support the video tag.
                  </video>
                  <div className="text-sm text-foreground/60">
                    üí° ÎπÑÎîîÏò§Í∞Ä Ïû¨ÏÉùÎêòÏßÄ ÏïäÎäî Í≤ΩÏö∞, ÏßÅÏ†ë Îã§Ïö¥Î°úÎìúÌïòÏó¨ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="text-center py-8">
              <div className="text-foreground/50 mb-4">
                <PhotoIcon className="w-16 h-16 mx-auto mb-2" />
                <p>Í≤∞Í≥ºÎ¨ºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.</p>
              </div>
              <div className="text-sm text-foreground/40 space-y-1">
                <p>‚Ä¢ ÏûëÏóÖÏù¥ ÏïÑÏßÅ ÏôÑÎ£åÎêòÏßÄ ÏïäÏïòÏùÑ Ïàò ÏûàÏäµÎãàÎã§.</p>
                <p>‚Ä¢ Í≤∞Í≥º URLÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏùÑ Ïàò ÏûàÏäµÎãàÎã§.</p>
                <p>‚Ä¢ Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî.</p>
              </div>
            </div>
          )}
          
          {/* ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ (MultiTalkÏùò Í≤ΩÏö∞) */}
          {item.type === 'multitalk' && (
            <div>
              <h4 className="font-medium mb-2">Input Image</h4>
              
              {/* Î°úÏª¨ Ïù¥ÎØ∏ÏßÄ Ïõπ Í≤ΩÎ°úÍ∞Ä ÏûàÏúºÎ©¥ ÌëúÏãú */}
              {options.imageWebPath ? (
                <div className="relative">
                  <img 
                    src={options.imageWebPath} 
                    alt="Input image" 
                    className="w-full max-h-64 object-contain rounded-lg bg-background"
                    onError={(e) => {
                      console.error('‚ùå Local image error:', e);
                      console.error('‚ùå Local path:', options.imageWebPath);
                      
                      // ÏóêÎü¨ Î∞úÏÉù Ïãú Ïù¥ÎØ∏ÏßÄ ÏöîÏÜåÎ•º Ïà®Í∏∞Í≥† ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
                      const imgElement = e.currentTarget;
                      imgElement.style.display = 'none';
                      
                      // ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
                      const errorDiv = document.createElement('div');
                      errorDiv.className = 'p-4 text-center text-red-400 bg-red-900/20 rounded-lg';
                      errorDiv.innerHTML = `
                        <div class="mb-2">‚ö†Ô∏è ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§</div>
                        <div class="text-xs text-red-300">
                          <p>Ïõπ Í≤ΩÎ°ú: ${options.imageWebPath}</p>
                          <p>üí° ÌååÏùºÏù¥ public/results Ìè¥ÎçîÏóê ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî</p>
                        </div>
                      `;
                      imgElement.parentNode?.appendChild(errorDiv);
                    }}
                    onLoad={() => {
                      console.log('‚úÖ Local input image loaded successfully:', options.imageWebPath);
                    }}
                  />
                </div>
              ) : (
                <div className="text-center py-8 text-foreground/50">
                  <PhotoIcon className="w-16 h-16 mx-auto mb-2" />
                  <p>ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.</p>
                </div>
              )}
            </div>
          )}
          
          {/* FLUX KONTEXT ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ */}
          {item.type === 'flux-kontext' && (
            <div>
              <h4 className="font-medium mb-2">Input Image</h4>
              {(() => {
                try {
                  const options = JSON.parse(item.options || '{}');
                  
                  // ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°úÍ∞Ä ÏûàÏúºÎ©¥ ÌëúÏãú
                  if (options.inputImagePath) {
                    return (
                      <div className="space-y-4">
                        <div className="bg-background/50 p-4 rounded-lg">
                          <h5 className="font-medium mb-2">Local File Info</h5>
                          <div className="text-sm text-foreground/80 space-y-1">
                            <p><strong>Path:</strong> {options.inputImagePath}</p>
                            <p><strong>Name:</strong> {options.inputImageName || 'Unknown'}</p>
                          </div>
                        </div>
                        
                        {/* ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ ÌëúÏãú ÏãúÎèÑ */}
                        <div className="relative">
                          <img 
                            src={`/results/${options.inputImageName}`} 
                            alt="Input image" 
                            className="w-full max-h-64 object-contain rounded-lg bg-background"
                            onError={(e) => {
                              console.error('‚ùå Input image error:', e);
                              console.error('‚ùå Image path:', options.inputImagePath);
                              console.error('‚ùå Image name:', options.inputImageName);
                              console.error('‚ùå Web path:', `/results/${options.inputImageName}`);
                              
                              // ÏóêÎü¨ Î∞úÏÉù Ïãú Ïù¥ÎØ∏ÏßÄ ÏöîÏÜåÎ•º Ïà®Í∏∞Í≥† ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
                              const imgElement = e.currentTarget;
                              imgElement.style.display = 'none';
                              
                              // ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
                              const errorDiv = document.createElement('div');
                              errorDiv.className = 'p-4 text-center text-red-400 bg-red-900/20 rounded-lg';
                              errorDiv.innerHTML = `
                                <div class="mb-2">‚ö†Ô∏è ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§</div>
                                <div class="text-xs text-red-300">
                                  <p>Ïõπ Í≤ΩÎ°ú: /results/${options.inputImageName}</p>
                                  <p>Ïã§Ï†ú Í≤ΩÎ°ú: ${options.inputImagePath}</p>
                                  <p>ÌååÏùºÎ™Ö: ${options.inputImageName}</p>
                                  <p>üí° ÌååÏùºÏùÄ Ï°¥Ïû¨ÌïòÏßÄÎßå Ïõπ Ï†ëÍ∑º Í≤ΩÎ°ú Î¨∏Ï†úÏùº Ïàò ÏûàÏäµÎãàÎã§</p>
                                </div>
                              `;
                              imgElement.parentNode?.appendChild(errorDiv);
                            }}
                            onLoad={() => {
                              console.log('‚úÖ Input image loaded successfully:', options.inputImageName);
                              console.log('‚úÖ Web path used:', `/results/${options.inputImageName}`);
                            }}
                          />
                        </div>
                      </div>
                    );
                  }
                  
                  return (
                    <div className="text-center py-8 text-foreground/50">
                      <PhotoIcon className="w-16 h-16 mx-auto mb-2" />
                      <p>ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.</p>
                    </div>
                  );
                } catch (e) {
                  return (
                    <div className="text-center py-8 text-foreground/50">
                      <PhotoIcon className="w-16 h-16 mx-auto mb-2" />
                      <p>ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥Î•º ÌååÏã±Ìï† Ïàò ÏóÜÏäµÎãàÎã§.</p>
                    </div>
                  );
                }
              })()}
            </div>
          )}

          {/* WAN 2.2 ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ */}
          {item.type === 'wan22' && (
            <div>
              <h4 className="font-medium mb-2">Input Image</h4>
              {(() => {
                try {
                  const options = JSON.parse(item.options || '{}');
                  
                  // base64 Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÏúºÎ©¥ Ïö∞ÏÑ† ÌëúÏãú (FLUX KONTEXTÏôÄ ÎèôÏùº)
                  if (options.imageBase64) {
                    return (
                      <div className="space-y-4">
                        <div className="bg-background/50 p-4 rounded-lg">
                          <h5 className="font-medium mb-2">Base64 Image Data</h5>
                          <div className="text-sm text-foreground/80 space-y-1">
                            <p><strong>Format:</strong> Base64 encoded</p>
                            <p><strong>Size:</strong> {(options.imageBase64.length * 0.75 / 1024).toFixed(2)} KB</p>
                          </div>
                        </div>
                        
                        {/* base64 Ïù¥ÎØ∏ÏßÄ ÌëúÏãú */}
                        <div className="relative">
                          <img 
                            src={`data:image/jpeg;base64,${options.imageBase64}`}
                            alt="Input image" 
                            className="w-full max-h-64 object-contain rounded-lg bg-background"
                            onLoad={() => {
                              console.log('‚úÖ Base64 input image loaded successfully');
                            }}
                          />
                        </div>
                      </div>
                    );
                  }
                  
                  // ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°úÍ∞Ä ÏûàÏúºÎ©¥ ÌëúÏãú (Ìè¥Î∞±)
                  if (options.inputImagePath) {
                    return (
                      <div className="space-y-4">
                        <div className="bg-background/50 p-4 rounded-lg">
                          <h5 className="font-medium mb-2">Local File Info</h5>
                          <div className="text-sm text-foreground/80 space-y-1">
                            <p><strong>Path:</strong> {options.inputImagePath}</p>
                            <p><strong>Name:</strong> {options.inputImageName || 'Unknown'}</p>
                          </div>
                        </div>
                        
                        {/* ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ ÌëúÏãú ÏãúÎèÑ */}
                        <div className="relative">
                          <img 
                            src={`/results/${options.inputImageName}`} 
                            alt="Input image" 
                            className="w-full max-h-64 object-contain rounded-lg bg-background"
                            onError={(e) => {
                              console.error('‚ùå Input image error:', e);
                              console.error('‚ùå Image path:', options.inputImagePath);
                              console.error('‚ùå Image name:', options.inputImageName);
                              console.error('‚ùå Web path:', `/results/${options.inputImageName}`);
                              
                              // ÏóêÎü¨ Î∞úÏÉù Ïãú Ïù¥ÎØ∏ÏßÄ ÏöîÏÜåÎ•º Ïà®Í∏∞Í≥† ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
                              const imgElement = e.currentTarget;
                              imgElement.style.display = 'none';
                              
                              // ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
                              const errorDiv = document.createElement('div');
                              errorDiv.className = 'p-4 text-center text-red-400 bg-red-900/20 rounded-lg';
                              errorDiv.innerHTML = `
                                <div class="mb-2">‚ö†Ô∏è ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§</div>
                                <div class="text-xs text-red-300">
                                  <p>Ïõπ Í≤ΩÎ°ú: /results/${options.inputImageName}</p>
                                  <p>Ïã§Ï†ú Í≤ΩÎ°ú: ${options.inputImagePath}</p>
                                  <p>ÌååÏùºÎ™Ö: ${options.inputImageName}</p>
                                  <p>üí° ÌååÏùºÏùÄ Ï°¥Ïû¨ÌïòÏßÄÎßå Ïõπ Ï†ëÍ∑º Í≤ΩÎ°ú Î¨∏Ï†úÏùº Ïàò ÏûàÏäµÎãàÎã§</p>
                                </div>
                              `;
                              imgElement.parentNode?.appendChild(errorDiv);
                            }}
                            onLoad={() => {
                              console.log('‚úÖ Input image loaded successfully:', options.inputImageName);
                              console.log('‚úÖ Web path used:', `/results/${options.inputImageName}`);
                            }}
                          />
                        </div>
                      </div>
                    );
                  }
                  
                  return (
                    <div className="text-center py-8 text-foreground/50">
                      <PhotoIcon className="w-16 h-16 mx-auto mb-2" />
                      <p>ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.</p>
                    </div>
                  );
                } catch (e) {
                  return (
                    <div className="text-center py-8 text-foreground/50">
                      <PhotoIcon className="w-16 h-16 mx-auto mb-2" />
                      <p>ÏûÖÎ†• Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥Î•º ÌååÏã±Ìï† Ïàò ÏóÜÏäµÎãàÎã§.</p>
                    </div>
                  );
                }
              })()}
            </div>
          )}


        </div>
      </div>
    </div>
  );
};

export default function Library() {
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [selectedItem, setSelectedItem] = useState<JobItem | null>(null);
  const [deleteConfirm, setDeleteConfirm] = useState<JobItem | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showFavoritesOnly, setShowFavoritesOnly] = useState(false);

  const { data, error, isValidating, mutate } = useSWR('/api/jobs', fetcher, { 
    refreshInterval: 5000,
    onSuccess: () => setLastUpdate(new Date())
  });

  const jobs: JobItem[] = data?.jobs || [];
  const processingJobs = jobs.filter(job => job.status === 'processing').length;
  
  // Ï¶êÍ≤®Ï∞æÍ∏∞ ÌïÑÌÑ∞ÎßÅ
  const filteredJobs = showFavoritesOnly ? jobs.filter(job => job.isFavorite) : jobs;

  const handleItemClick = (item: JobItem) => {
    setSelectedItem(item);
  };

  const handleCloseModal = () => {
    setSelectedItem(null);
  };

  const handleDeleteClick = (item: JobItem, e: React.MouseEvent) => {
    e.stopPropagation(); // Î∂ÄÎ™® ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Î∞©ÏßÄ
    setDeleteConfirm(item);
  };

  const handleFavoriteToggle = async (item: JobItem, e: React.MouseEvent) => {
    e.stopPropagation(); // Î∂ÄÎ™® ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Î∞©ÏßÄ
    
    try {
      const response = await fetch('/api/jobs/favorite', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ jobId: item.id }),
      });

      if (response.ok) {
        // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
        await mutate();
      } else {
        const errorData = await response.json();
        console.error('Favorite toggle failed:', errorData);
        alert('Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉú Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('Favorite toggle error:', error);
      alert('Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉú Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handleDeleteConfirm = async () => {
    if (!deleteConfirm) return;

    setIsDeleting(true);
    try {
      const response = await fetch('/api/jobs/delete', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ jobId: deleteConfirm.id }),
      });

      if (response.ok) {
        // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
        await mutate();
        setDeleteConfirm(null);
      } else {
        const errorData = await response.json();
        console.error('Delete failed:', errorData);
        alert('ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('Delete error:', error);
      alert('ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsDeleting(false);
    }
  };

  const handleDeleteCancel = () => {
    setDeleteConfirm(null);
  };

  return (
    <>
      <aside className="w-[450px] bg-secondary p-6 flex flex-col flex-shrink-0 border-l border-border">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold">Library</h2>
          <div className="flex items-center gap-2">
            {processingJobs > 0 && (
              <div className="flex items-center gap-1 text-yellow-400">
                <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-yellow-400"></div>
                <span className="text-xs">{processingJobs} processing</span>
              </div>
            )}
            {isValidating && (
              <div className="text-xs text-foreground/50">Updating...</div>
            )}
          </div>
        </div>
        <div className="bg-background/50 rounded-lg p-1 flex gap-1 mb-6">
          <button
            className={`flex-1 capitalize py-2 px-3 rounded-md text-sm font-medium transition-colors duration-200 ${showFavoritesOnly ? 'bg-primary text-white' : 'hover:bg-white/5'}`}
            onClick={() => setShowFavoritesOnly(!showFavoritesOnly)}
          >
            {showFavoritesOnly ? 'Ï†ÑÏ≤¥ Î≥¥Í∏∞' : 'Ï¶êÍ≤®Ï∞æÍ∏∞Îßå Î≥¥Í∏∞'}
          </button>
        </div>
        {error && <div className="text-red-500 text-center">Failed to load jobs</div>}
        {!data && <div className="text-center">Loading...</div>}
        <div className="flex-1 grid grid-cols-2 gap-3 overflow-y-auto pr-2 auto-rows-min library-scrollbar">
          {filteredJobs.length === 0 && !error && data ? (
            <p className="text-foreground/50 col-span-2 text-center">
              {showFavoritesOnly ? 'Ï¶êÍ≤®Ï∞æÍ∏∞Îêú Ìï≠Î™©Ïù¥ ÏóÜÏäµÎãàÎã§.' : 'ÏûëÏóÖ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.'}
            </p>
          ) : (
            filteredJobs.map((job) => (
              <LibraryItem 
                key={job.id} 
                item={job} 
                onItemClick={handleItemClick}
                onDeleteClick={handleDeleteClick}
                onFavoriteToggle={handleFavoriteToggle}
              />
            ))
          )}
        </div>
      </aside>
      
      {/* Í≤∞Í≥º Î™®Îã¨ */}
      <ResultModal item={selectedItem} onClose={handleCloseModal} />
      
      {/* ÏÇ≠Ï†ú ÌôïÏù∏ Î™®Îã¨ */}
      {deleteConfirm && (
        <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4">
          <div className="bg-secondary rounded-lg max-w-md w-full p-6 border border-border">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center">
                <TrashIcon className="w-5 h-5 text-red-500" />
              </div>
              <h3 className="text-lg font-semibold">Í≤∞Í≥ºÎ¨º ÏÇ≠Ï†ú</h3>
            </div>
            
            <p className="text-foreground/80 mb-6">
              <strong>{deleteConfirm.type}</strong> Í≤∞Í≥ºÎ¨ºÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?
              <br />
              <span className="text-sm text-foreground/60">
                Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.
              </span>
            </p>
            
            <div className="flex gap-3 justify-end">
              <button
                onClick={handleDeleteCancel}
                disabled={isDeleting}
                className="px-4 py-2 text-foreground/70 hover:text-foreground transition-colors disabled:opacity-50"
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={handleDeleteConfirm}
                disabled={isDeleting}
                className="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors disabled:opacity-50 flex items-center gap-2"
              >
                {isDeleting ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    ÏÇ≠Ï†ú Ï§ë...
                  </>
                ) : (
                  'ÏÇ≠Ï†ú'
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
